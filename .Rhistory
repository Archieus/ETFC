test <- as.matrix(TSYMat, 7,11)
?matrix
test <- as.matrix(TSYMat, 7,11, byrow = TRUE)
test
View(test)
test - Yields
test <- as.data.frame(TSYMat, 7,11, byrow = TRUE)
str(test)
isop.asmatrix(TSYMat)
test <- is.matrix(TSYMat, 7,11, byrow = TRUE)
test - as.list(Yields)
Yields[row(TsyYlds),]-TsyYlds
Yields[1]
Yields[1][[1]]
Yields[2][[1]]
Yields[2][[2]]
Yields[3][[1]]
TSYMat[1]
TSYMat[1][[1]]
test <- unlist(TSYMat)
test
View(Test)
View(test)
test <- as.matrix(unlist(TSYMat))
test
View(test)
test <- as.matrix(unlist(TSYMat), nrow = 7, ncol = 11)
Test
test
str(test)
test <- as.matrix(unlist(TSYMat), nrow = 11, ncol = 7)
View(test)
TDYlds<-   read.table("yields.txt", header = TRUE, sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
Yields <- as.data.frame(lapply(Yields, function(x) as.numeric(as.character(x))))
row.names(Yields) <- TDYlds[,1]
TsyYlds <- Yields[11,]
rep.row<-function(x,n){matrix(rep(x,each=n),nrow=n)}
TSYMat <- as.data.frame(rep.row(TsyYlds,11))
row.names(TSYMat) <- TDYlds[,1]
View(Yields)
#### Convert Non-Numeric to NA ####
Yields <- as.data.frame(lapply(Yields, function(x) (as.numeric(x))))
row.names(Yields) <- TDYlds[,1]
View(Yields)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
yields
str(Yields)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
#### Convert Non-Numeric to NA ####
Yields <- as.data.frame(lapply(Yields, function(x) as.numeric(as.character(x))))
Yield[is.na(Yields)] <- 0
row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
Yields <- as.data.frame(lapply(Yields, function(x) as.numeric(as.character(x))))
Yields[is.na(Yields)] <- 0
row.names(Yields) <- TDYlds[,1]
TsyYlds <- Yields[11,]
rep.row<-function(x,n){matrix(rep(x,each=n),nrow=n)}
TSYMat <- as.data.frame(rep.row(TsyYlds,11))
row.names(TSYMat) <- TDYlds[,1]
Yields - TSYMat
Yields - TsyYields
Yields - TsyYlds
View(TSYMat)
View(TsyYlds)
View(TDYlds)
View(TSYMat)
View(TsyYlds)
view(TsyYlds)
View(TsyYlds)
TsyYlds-Yields
ncol(Yields)
ncol(TsyYlds)
Yields[[1]]
Yields[1]
Yields[1:7]
Yields[1:7][1]
Yields[1:7]-TsyYlds
TsyYlds[1]
TsyYlds[1:7]
TsyYlds
Yields[1:7]-TsyYlds[1:7]
Yields[,1:7]-TsyYlds[,1:7]
Yields[,1:7]-TsyYlds[1:7]
Yields - Yields
str(Yields)
str(TsyYlds)
rep(Yields[11,],11)
Yields[11,]
?replications
?copy
TsyYlds <- c(Yields[11,],Yields[11,])
TsyYlds <- cbind(Yields[11,],Yields[11,])
TsyYlds <- rbind(Yields[11,],Yields[11,])
TsyYlds <- matrix(Yields[11,], nrow =11, ncol = 7)
str(TsyYlds)
TsyYlds <- matrix(Yields[11,], nrow =11, ncol = 7, byrow = TRUE)
re
TsyYlds - TsyYlds
TsyYlds <- as.data.frame(matrix(Yields[11,], nrow =11, ncol = 7, byrow = TRUE))
TsyYlds - TsyYlds
TsyYlds * TsyYlds
TsyYlds <- as.data.frame(matrix(Yields[11,], nrow =11, ncol = 7, byrow = TRUE))
row.names(TsyYlds) <- TDYlds[,1]
TsyYlds <- matrix(Yields[11,], nrow =11, ncol = 7, byrow = TRUE)
row.names(TsyYlds) <- TDYlds[,1]
row.names(TsyYlds) <- TDYlds[11,1]
TsyYlds <- matrix(Yields[11,], nrow =11, ncol = 7, byrow = TRUE)
TsyYlds[1]
TsyYlds[2]
TsyYlds[[2]]
TsyYlds[[7]]
TsyYlds[11]
TsyYlds[1]-Yields[1]
View(TsyYlds)
View(Yields)
Yields[1]-TsyYlds[1]
.566-.349
.153-.349
Yields[[1:7]]
Yields[[1]]
Yields[[1]]-TsyYlds
TsyYlds[1]
TsyYlds[[1]]
TsyYlds[[,1]]
TsyYlds[,1]
TsyYlds[1,]
TsyYlds <- Yields[11,]
TsyYlds
TsyYlds[1]
TsyYlds[2]
TsyYlds[:2]
TsyYlds[1:2]
ncol(TsyYlds)
ncol(Yields)
?vapply
test <- lapply(Yields, function() {x - TsyYlds})
Yields
Yields[1]
Yields[[]]
Yields[[1]]
test <- lapply(Yields[[]], function() {x - TsyYlds})
test <- lapply(Yields, function() {x[[]] - TsyYlds})
str(TsyYlds)
str(Yields)
ncol(Yields)
Yields * TsyYlds
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spread[,i] <- Yields[i] - TsyYlds[i]
}
for(i in 1:7) {
Spread[,i] <- Yields[i] -- TsyYlds[i]
}
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spread[,i] <- diff(Yields[i],TsyYlds[i])
}
for(i in 1:7) {
Spread[,i] <- diff(Yields[i] %-% TsyYlds[i])
}
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spread[,i] <- Yields[i] %-% TsyYlds[i]
}
Yields[1]
Yields[[1]]
for(i in 1:7) {
Spread[,i] <- Yields[[i]] - TsyYlds[i]
}
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spread[,i] <- Yields[[i]] - TsyYlds[i]
}
for(i in 1:7) {
Spreads[,i] <- Yields[[i]] - TsyYlds[i]
}
for(i in 1:7) {
Spreads[,i] <- Yields[[,i]] - TsyYlds[[,i]]
}
for(i in 1:7) {
Spreads[,i] <- Yields[[i]] - TsyYlds[[i]]
}
for(i in 1:7) {
Spreads[,i] <- Yields[[i]] - TsyYlds[i]
}
Yields[,1]
Yields[,2]
TsyYlds
TsyYlds[1]
TsyYlds[2]
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spreads[,i] <- Yields[,i] - TsyYlds[i]
}
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spreads[,i] <- Yields[,i] - TsyYlds[,i]
}
View(Spreads)
row.names(Spreads) <- TDYlds[,1]
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
View(TDYlds)
names(TDYlds)
names(Spread)
names(Spreads)
row.names(Spreads) <- TDYlds[,1]
names(Spreads) <- names(TDYlds[2:8])
print(Spreads)
names(TDYlds)
names(TDYlds[2])
names(TDYlds[8])
View(TDYlds)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
row.names(Spreads) <- TDYlds[,1]
colnames(Spreads) <- col.names(TDYlds[2:8])
print(Spreads)
colnames(Spreads) <- colnames(TDYlds[2:8])
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
View(TDYlds)
TDYlds
TDYlds<-   read.table("yields.txt", header = TRUE, sep = '\tX') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(Yields, function(x) as.numeric(as.character(x)))))
Yields[is.na(Yields)] <- 0 ## Turn NAs to 0
row.names(Yields) <- TDYlds[,1]
TsyYlds <- Yields[11,]
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spreads[,i] <- Yields[,i] - TsyYlds[,i]
}
row.names(Spreads) <- TDYlds[,1]
colnames(Spreads) <- colnames(TDYlds[2:8])
print(Spreads)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
naming <- gsub(TDYlds, "X","")
View(TDYlds)
?read.table
TDYlds<-   read.table("yields.txt", header = TRUE, col.names = header, sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
TDYlds<-   read.table("yields.txt", header = TRUE, col.names = "", sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
TDYlds<-   read.table("yields.txt", header = TRUE, col.names = FALSE, sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
TDYlds<-   read.table("yields.txt", header = TRUE, col.names = NULL, sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
TDYlds<-   read.table("yields.txt", header = FALSE, sep = '\t') #sep = "tab delimited"
View(TDYlds)
TDYlds<-   read.table("yields.txt", header = TRUE, sep = '\t') #sep = "tab delimited"
TDYlds<-   read.table("yields.txt", header = TRUE, check.names = FALSE, sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
Yields[1:10]
Yields(1:10)
Yields[,1:10]
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
View(Yields)
View(TDYlds)
TDYlds<-   read.table("yields.txt", header = TRUE, check.names = FALSE, sep = '\t') #sep = "tab delimited"
#Yields <- TDYlds[,2:8]
#row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(TDYlds, function(x) as.numeric(as.character(x)))))
#Yields[is.na(Yields)] <- 0 ## Turn NAs to 0
row.names(Yields) <- TDYlds[,1]
TsyYlds <- Yields[11,]
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spreads[,i] <- (Yields[,i] - TsyYlds[,i])
}
row.names(Spreads) <- TDYlds[,1]
colnames(Spreads) <- colnames(TDYlds[2:8])
print(TDYlds)
print(Spreads)
source('C:/Users/rodney/Dropbox/RCode/Test Files/Fixed Income/YieldGrid.R', echo=TRUE)
Yields <- TDYlds[,2:8]
#row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(Yields, function(x) as.numeric(as.character(x)))))
#Yields[is.na(Yields)] <- 0 ## Turn NAs to 0
row.names(Yields) <- TDYlds[,1]
TsyYlds <- Yields[11,]
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spreads[,i] <- (Yields[,i] - TsyYlds[,i])
}
row.names(Spreads) <- TDYlds[,1]
colnames(Spreads) <- colnames(TDYlds[2:8])
print(Yields)
print(Spreads)
View(TDYlds)
TDYlds<-   read.table("yields.txt", header = TRUE, check.names = FALSE, sep = '\t') #sep = "tab delimited"
#Yields <- TDYlds[,2:8]
#row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(TDYlds, function(x) as.numeric(as.character(x)))))
#Yields[is.na(Yields)] <- 0 ## Turn NAs to 0
row.names(Yields) <- TDYlds[,1]
TsyYlds <- Yields[11,]
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spreads[,i] <- (Yields[,i] - TsyYlds[,i])
}
row.names(Spreads) <- TDYlds[,1]
colnames(Spreads) <- colnames(TDYlds[2:8])
print(Yields)
print(Spreads)
TDYlds<-   read.table("yields.txt", header = TRUE, check.names = FALSE, sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(TDYlds, function(x) as.numeric(as.character(x)))))
#Yields[is.na(Yields)] <- 0 ## Turn NAs to 0
row.names(Yields) <- TDYlds[,1]
TsyYlds <- Yields[11,]
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spreads[,i] <- (Yields[,i] - TsyYlds[,i])
}
row.names(Spreads) <- TDYlds[,1]
colnames(Spreads) <- colnames(TDYlds[2:8])
print(Yields)
print(Spreads)
TDYlds<-   read.table("yields.txt", header = TRUE, check.names = FALSE, sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(TDYlds, function(x) as.numeric(as.character(x)))))
#Yields[is.na(Yields)] <- 0 ## Turn NAs to 0
row.names(Yields) <- TDYlds[,1]
TsyYlds <- Yields[11,]
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spreads[,i] <- (TDYlds[,i] - TsyYlds[,i])
}
row.names(Spreads) <- TDYlds[,1]
colnames(Spreads) <- colnames(TDYlds[2:8])
print(Yields)
print(Spreads)
View(TDYlds)
View(Yields)
TDYlds<-   read.table("yields.txt", header = TRUE, check.names = FALSE, sep = '\t') #sep = "tab delimited"
View(TDYlds)
Yields <- TDYlds[,2:8]
View(Yields)
row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(TDYlds, function(x) as.numeric(as.character(x)))))
View(Yields)
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(Yields, function(x) as.numeric(as.character(x)))))
View(Yields)
Yields
View(Yields)
View(TDYlds)
View(Yields)
suppressWarnings(Yields <- as.data.frame(lapply(Yields[,], function(x) as.numeric(as.character(x)))))
TDYlds<-   read.table("yields.txt", header = TRUE, check.names = FALSE, sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
suppressWarnings(Yields <- as.data.frame(lapply(Yields[], function(x) as.numeric(as.character(x)))))
View(Yields)
TDYlds<-   read.table("yields.txt", header = TRUE, check.names = FALSE, sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(Yields[], function(x) as.numeric(as.character(x)))))
#Yields[is.na(Yields)] <- 0 ## Turn NAs to 0
row.names(Yields) <- TDYlds[,1]
TsyYlds <- Yields[11,]
Spreads <- matrix(0, nrow = 11, ncol = 7)
for(i in 1:7) {
Spreads[,i] <- (TDYlds[,i] - TsyYlds[,i])
}
row.names(Spreads) <- TDYlds[,1]
colnames(Spreads) <- colnames(TDYlds[2:8])
print(Yields)
print(Spreads)
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(Yields[], function(x) as.numeric(as.character(x)))))
TDYlds<-   read.table("yields.txt", header = TRUE, check.names = FALSE, sep = '\t') #sep = "tab delimited"
Yields <- TDYlds[,2:8]
row.names(Yields) <- TDYlds[,1]
#### Convert Non-Numeric to NA ####
suppressWarnings(Yields <- as.data.frame(lapply(Yields[], function(x) as.numeric(as.character(x)))))
RandomNumbers <- runif(100, 1, 100)
RandomNumber2 <- runif(100, 1, 100)
plot(RandomNumbers)
par(new = TRUE)
plot(RandomNumber2)
plot(RandomNumber2, type = 'l')
par(new = TRUE)
plot(RandomNumbers)
install.packages(c("lubridate", "openssl", "rlang", "Rsymphony", "tidyselect"))
install.packages("C:/Users/rodney/Downloads/Rsymphony_0.1-27.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/rodney/Downloads/Rsymphony_0.1-28.tar.gz", repos = NULL, type = "source")
setwd("C:/Users/rodney/Dropbox/RCode/1. TC2K Format/ETFC-TC2K")
library(PerformanceAnalytics)
library(fPortfolio)
library(quantmod)
Sys.setenv(TZ = 'GMT')
#### reads/loads text into R and converts to XTS ####
ETFCtxt <- read.table('ETFC', header = FALSE, sep = ',')
ETFCzoo <- read.zoo(ETFCtxt, sep = ",", format = "%m/%d/%Y", split = 3)
ETFCxts <- as.xts(ETFCzoo)
View(ETFCxts)
TDA.x <- na.omit(cbind(ETFCxts[,c(9,20:28)]))
View(TDA.x)
schwab.x <- na.omit(cbind(ETFCxts[,c(10:17,29)]))
View(schwab.x)
Fidelity.x <- na.omit(cbind(ETFCxts[,c(1:8,18)]))
View(Fidelity.x)
TDA.x <- na.omit(cbind(ETFCxts[,c(9,20:28)]))
Schwab.x <- na.omit(cbind(ETFCxts[,c(10:17,29)]))
Fidelity.x <- na.omit(cbind(ETFCxts[,c(1:8,18)]))
#Calculate daily log component returns
TDA.Ret <- na.omit(Return.calculate(TDA.x, method = ("discrete")))
Schwab.Ret <- na.omit(Return.calculate(Schwab.x, method = ("discrete")))
Fidelity.Ret <- na.omit(Return.calculate(Fidleity.x, method = ("discrete")))
Fidelity.Ret <- na.omit(Return.calculate(Fidelity.x, method = ("discrete")))
View(TDA.Ret)
#Extract Returns by asset class
TDAEQ.Ret <-na.omit(cbind(TDA.Ret[,c(1,3,4,7,8,10)]))
TDAFI.Ret <- cbind(TDA.Ret[,c(2,5,6,9)])
SchEQ.Ret <- cbind(Schwab.Ret[,c(1:5,7)])
SchFI.Ret <- cbind(Schwab.Ret[,c(6,8:9)])
View(Fidelity.Ret)
FidEQ.Ret <- cbind(Fidelity.Ret[,c(2,3,4,5,6,7)])
FidFI.Ret <- cbind(Fidelity.Ret[,c(1,8,9)])
View(FidEQ.Ret)
View(FidFI.Ret)
#Create Portfolio Spec for modeling mean-variance portfolio
Default <- portfolioSpec()
setAlpha(Default) <- .05 #Sets Confidence Interval for CVaR .01 = 99%, .05 =95%
TDAFIroll <- rollingWindows(TDAFI.Ret, period = "12m", by = "1m")
SCHFIroll <- rollingWindows(SchFI.Ret, period = "12m", by = "1m")
FIDFIroll <- rollingWindows(FidFI.Ret, period = "12m", by = "1m")
TDAEQroll <- rollingWindows(TDAEQ.Ret, period = "12m", by = "1m")
SCHEQroll <- rollingWindows(SchEQ.Ret, period = "12m", by = "1m")
FIDEQroll <- rollingWindows(FidEQ.Ret, period = "12m", by = "1m")
#Create Portfolio Spec for modeling mean-variance portfolio
Default <- portfolioSpec()
setAlpha(Default) <- .05 #Sets Confidence Interval for CVaR .01 = 99%, .05 =95%
TDAFIroll <- rollingWindows(TDAFI.Ret, period = "12m", by = "1m")
SCHFIroll <- rollingWindows(SchFI.Ret, period = "12m", by = "1m")
FIDFIroll <- rollingWindows(FidFI.Ret, period = "12m", by = "1m")
TDAEQroll <- rollingWindows(TDAEQ.Ret, period = "12m", by = "1m")
SCHEQroll <- rollingWindows(SchEQ.Ret, period = "12m", by = "1m")
FIDEQroll <- rollingWindows(FidEQ.Ret, period = "12m", by = "1m")
#Create a Mean-Variance Optimized Portfolio for Highest Sharpe Ratio Using Rolling Windows#
TDAFI.roll <- rollingTangencyPortfolio(as.timeSeries(Fixed.Ret), spec = Default,
constraints = c('minW[1:3] = .1', 'maxW[1:3] = .5'),
from = TDAFIroll$from, to = TDAFIroll$to)
#Create a Mean-Variance Optimized Portfolio for Highest Sharpe Ratio Using Rolling Windows#
TDAFI.roll <- rollingTangencyPortfolio(as.timeSeries(TDAFI.Ret), spec = Default,
constraints = c('minW[1:3] = .1', 'maxW[1:3] = .5'),
from = TDAFIroll$from, to = TDAFIroll$to)
SchFI.roll <- rollingTangencyPortfolio(as.timeSeries(SchFI.Ret), spec = Default,
constraints = c('minW[1:3] = .1', 'maxW[1:3] = .5'),
from = SCHFIroll$from, to = SCHFIroll$to)
FIDFI.roll <- rollingTangencyPortfolio(as.timeSeries(FidFI.Ret), spec = Default,
constraints = c('minW[1:3] = .1', 'maxW[1:3] = .5'),
from = FIDFIroll$from, to = FIDFIroll$to)
TDAEQ.roll <- rollingTangencyPortfolio(as.timeSeries(TDAEQ.Ret), spec = Default,
constraints = c('minW[2:6] = .05', 'maxW[1] = .10', 'maxsumW[4:6] = .80',
'maxsumW[2:3] = .25'),from = TDAEQroll$from, to = TDAEQroll$to)
SchEQ.roll <- rollingTangencyPortfolio(as.timeSeries(SchEQ.Ret), spec = Default,
constraints = c('minW[c(1,2,3,5,6)] = .05', 'maxW[4] = .10',
'maxsumW[c(1,5,6)] = .80', 'maxsumW[2:3] = .25'),
from = SCHEQroll$from, to = SCHEQroll$to)
View(FidEQ.Ret)
FIDEQ.roll <- rollingTangencyPortfolio(as.timeSeries(FidEQ.Ret), spec = Default,
constraints = c('minW[1:5] = .05', 'maxW[6] = .10',
'maxsumW[c(3,4,5)] = .80', 'maxsumW[1:2] = .25'),
from = FIDEQroll$from, to = FIDEQroll$to)
FIDEQ.roll <- rollingTangencyPortfolio(as.timeSeries(FidEQ.Ret), spec = Default,
constraints = c('minW[1:5] = .05', 'maxW[6] = .10',
'maxsumW[c(3,4,5)] = .80'),
from = FIDEQroll$from, to = FIDEQroll$to)
last(FIDEQ.roll)
FIDEQ.roll <- rollingTangencyPortfolio(as.timeSeries(FidEQ.Ret), spec = Default,
constraints = c('minW[1:5] = .05', 'maxW[6] = .10',
'maxsumW[c(3,4,5)] = .90', 'maxsumW[1:2] = .25'),
from = FIDEQroll$from, to = FIDEQroll$to)
FIDEQ.roll <- rollingTangencyPortfolio(as.timeSeries(FidEQ.Ret), spec = Default,
constraints = c('minW[1:5] = .05', 'maxW[6] = .10',
'maxsumW[c(3,4,5)] = .90', 'maxW[1:2] = .10'),
from = FIDEQroll$from, to = FIDEQroll$to)
FIDEQ.roll <- rollingTangencyPortfolio(as.timeSeries(FidEQ.Ret), spec = Default,
constraints = c('minW[1:5] = .05', 'maxW[6] = .10',
'maxsumW[c(3,4,5)] = .90', 'maxW[1:2] = .3'),
from = FIDEQroll$from, to = FIDEQroll$to)
FIDEQ.roll <- rollingTangencyPortfolio(as.timeSeries(FidEQ.Ret), spec = Default,
constraints = c('minW[1:5] = .05', 'maxW[6] = .10',
'maxsumW[c(3,4,5)] = .90', 'maxsumW[1:2] = .3'),
from = FIDEQroll$from, to = FIDEQroll$to)
